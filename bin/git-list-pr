#!/usr/bin/env python
import json
import requests # python-requests
import sys

BASE_URL="https://api.github.com/repos/"

def getPullRequests(base_url):
    url = base_url + "pulls"
    req = requests.get(url)

    status_code = req.status_code
    if status_code == 403:
        print "status:", status_code
        print req.json()['message']
        sys.exit(-1)

    try:
        doc = req.json()
    except TypeError:
        doc = req.json

    return doc

def simplify(pullRequest):
    result = {'number':pullRequest['number'],
              'creator':pullRequest['user']['login'],
              'assignee':pullRequest['assignee'],
              'sha': pullRequest['head']['sha'],
              'state':None
              }

    if result['assignee'] is None:
        result['assignee'] = 'unassigned'
    else:
        result['assignee'] = result['assignee']['login']
    return result

def changeNames(pullRequest, user):
    if pullRequest['creator'] == user:
        pullRequest['creator'] = 'me'
    if pullRequest['assignee'] == user:
        pullRequest['assignee'] = 'me'
    return pullRequest

def resolveStatus(pullRequest, base_url):
    url = "%scommits/%s/status" % (base_url, pullRequest['sha'])
    req = requests.get(url)
    status_code = req.status_code
    if status_code == 403:
        print "status:", status_code
        print req.json()['message']
        sys.exit(-1)

    try:
        doc = req.json()
    except TypeError:
        doc = req.json

    pullRequest['state'] = doc['state']

    return pullRequest


if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('repo')
    parser.add_argument('username')
    OUT_DEFAULT = '~/.git-open-pr'
    parser.add_argument('-o', '--output', default=OUT_DEFAULT,
                        help='location to write output (default=\'%s\')' % OUT_DEFAULT)
    parser.add_argument('--dryrun', action='store_true', help='print results to stdout rather than file')
    args = parser.parse_args()

    url = "%s%s/" % (BASE_URL, args.repo)
    pullRequests = getPullRequests(url)

    pullRequests = [simplify(request) for request in pullRequests]
    pullRequests = [changeNames(request, args.username) for request in pullRequests]

    total = len(pullRequests)

    finalSet = []
    for pullRequest in pullRequests:
        if pullRequest['creator'] == 'me' or pullRequest['assignee'] == 'me':
            finalSet.append(resolveStatus(pullRequest, url))

    # print the results
    if args.dryrun:
        for item in finalSet:
            print "%s %s for %s (by %s)" % (item['number'], item['state'], item['assignee'], item['creator'])
        print "%d open, %d involve me" % (total, len(finalSet))
    else:
        import os
        filename = os.path.expanduser(args.output)
        with open(filename, 'w') as handle:
            for item in finalSet:
                handle.write("%s %s for %s (by %s)\n" % (item['number'], item['state'], item['assignee'], item['creator']))
            handle.write("%d open, %d involve me\n" % (total, len(finalSet)))
